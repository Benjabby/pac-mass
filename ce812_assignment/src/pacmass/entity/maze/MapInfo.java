package pacmass.entity.maze;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.jbox2d.collision.shapes.PolygonShape;
import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.FixtureDef;

import pacmass.DebugFlags;
import pacmass.Utils;
import pacmass.engine.Game;

/**
 * Also known as over-complicating everything.
 * @author Ben Tilbury
 *
 */
public class MapInfo 
{
	// Level Flags
//	static final byte DYNAMIC 	= 0b01000000;
	
	// Component
	// I could infer these from the properties really couldn't I. But whatever. 
	public static final byte NONE 		= 0b00000000; // Empty
	public static final byte PLAYER 	= 0b00000001; // Player Start
	public static final byte WALL 		= 0b00000010; // Wall
	public static final byte PELLET		= 0b00000100; // Pellet
	public static final byte GHOST		= 0b00001000; // Ghost
	
	public static final byte WARP = (byte)0b10000000; // Warp (should not be used explicitly)
	
	/* Valid co-occurrences 
	 * G and P
	 * 
	 */
	
	public static final int TYPE_MASK 			= 0b00000000000000000000000011111111;
	public static final int PROP_MASK 			= 0b11111111111111111111111100000000;
	
	
//	public static final byte WALL_PROP_SHIFT	= 8;
	public static final int WALL_PROP_MASK 		= 0b00000000000000000000001100000000;

//	public static final byte PELLET_PROP_SHIFT	= 10;
	public static final int PELLET_PROP_MASK 	= 0b00000000000000000000110000000000;
	public static final int PELLET_POWER 		= 0b00000000000000000000010000000000;

//	public static final byte GHOST_PROP_SHIFT 	= 12;
	public static final int GHOST_PROP_MASK 	= 0b00000000000000000111000000000000;
	public static final int GHOST_COL_RED		= 0b00000000000000000000000000000000;
	public static final int GHOST_COL_ORANGE	= 0b00000000000000000001000000000000;
	public static final int GHOST_COL_CYAN		= 0b00000000000000000010000000000000;
	public static final int GHOST_COL_PINK		= 0b00000000000000000011000000000000;
	public static final int GHOST_COL_WHITE		= 0b00000000000000000100000000000000;

	
	static final int[][] LEVEL1_MAP =
		{
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET|PELLET_POWER,	PELLET|GHOST|GHOST_COL_ORANGE,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET|GHOST|GHOST_COL_RED,	PELLET|PELLET_POWER,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL},
				{NONE,	NONE,	NONE,	WALL,	PELLET,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	PELLET,	WALL,	NONE,	NONE,	NONE},
				{WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	NONE,	WALL,	NONE,	PLAYER,	NONE,	WALL,	NONE,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL},
				{NONE,	NONE,	NONE,	NONE,	PELLET,	PELLET,	NONE,	WALL,	NONE,	NONE,	NONE,	WALL,	NONE,	PELLET,	PELLET,	NONE,	NONE,	NONE,	NONE},
				{WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL},
				{NONE,	NONE,	NONE,	WALL,	PELLET,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	PELLET,	WALL,	NONE,	NONE,	NONE},
				{WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET|PELLET_POWER,	PELLET|GHOST|GHOST_COL_PINK,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET|GHOST|GHOST_COL_CYAN,	PELLET|PELLET_POWER,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
		};
	
	static final int[][] LEVEL2_MAP =
		{
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	GHOST|GHOST_COL_WHITE,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	GHOST|GHOST_COL_WHITE,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	PELLET|PELLET_POWER,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{NONE,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	WALL,	WALL,	WALL,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	NONE},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	NONE,	NONE,	NONE,	NONE,	NONE,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	WALL,	NONE,	NONE,	NONE,	WALL,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	NONE,	PLAYER,	NONE,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	PELLET,	WALL},
				{WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL},
				{NONE,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	NONE},
				{WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	PELLET|PELLET_POWER|GHOST|GHOST_COL_WHITE,	PELLET,	WALL,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL,	WALL,	WALL,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
			};
	
	static final int[][] LEVEL3_MAP = 
		{
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	GHOST|GHOST_COL_ORANGE,	PELLET,	WALL,	PELLET,	GHOST|GHOST_COL_CYAN,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET|PELLET_POWER,	PELLET,	WALL,	PELLET,	PELLET|PELLET_POWER,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{NONE,	PELLET,	WALL,	PELLET,	PLAYER,	PELLET,	WALL,	PELLET,	NONE},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	PELLET|PELLET_POWER,	PELLET,	WALL,	PELLET,	PELLET|PELLET_POWER,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
				{WALL,	PELLET,	NONE,	PELLET,	WALL,	PELLET,	NONE,	PELLET,	WALL},
				{WALL,	PELLET,	GHOST|GHOST_COL_PINK,	PELLET,	WALL,	PELLET,	GHOST|GHOST_COL_RED,	PELLET,	WALL},
				{WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL,	PELLET,	WALL},
		};
	
	public static final int[][] WARP_TEST_MAP =
		{
				{NONE,	WALL,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	NONE,	NONE,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	PLAYER,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{NONE,	NONE,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	NONE,	NONE,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
		};
	
	static final int[][] TEST3_MAP = 
		{
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	NONE,	NONE,	PLAYER,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	PELLET,	WALL,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
		};
	
	static final int[][] ASYMM_MAP = 
		{
			{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
			{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
			{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
			{NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	PLAYER,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE},
			{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
			{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
			{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
		};
	
	static final int[][] EMPTY_MAP = 
		{
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	GHOST|GHOST_COL_PINK,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
		};
	
	static final int[][] EMPTY_LARGE_MAP =
		{
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	PLAYER,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	NONE,	WALL},
				{WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL,	WALL},
				};
	
	public static final MapInfo LEVEL1 = new MapInfo(LEVEL1_MAP);
	public static final MapInfo LEVEL2 = new MapInfo(LEVEL2_MAP);
	public static final MapInfo LEVEL3 = new MapInfo(LEVEL3_MAP);
	
	public static final MapInfo[] LEVELS = new MapInfo[] {LEVEL1,LEVEL2,LEVEL3};
	
	public static final MapInfo WARP_TEST = new MapInfo(WARP_TEST_MAP);
	public static final MapInfo TEST3 = new MapInfo(TEST3_MAP);
	public static final MapInfo EMPTY = new MapInfo(EMPTY_MAP);
	public static final MapInfo EMPTY_LARGE = new MapInfo(EMPTY_LARGE_MAP);
	public static final MapInfo ASYMM = new MapInfo(ASYMM_MAP);
	
	
	private static byte getType(int value)
	{
		return (byte)(value & TYPE_MASK);
	}
	
	public static boolean isMultiTyped(byte type)
	{
		// The 'is a power of 2' method for checking if only one bit is set doesn't work if the one bit is the sign bit, but no-one seems to mention it for some reason.
		return (type & (type - 1)) != 0 && type!=WARP;
	}
	
	private static int getProperties(int value)
	{
		return getProperties(getType(value),value);
	}
	
	private static int getProperties(byte type, int value)
	{
		int mask = 0;
		
		if(typeIs(type,WALL)) mask|=WALL_PROP_MASK;
		if(typeIs(type,PELLET)) mask|=PELLET_PROP_MASK;
		if(typeIs(type,GHOST)) mask|=GHOST_PROP_MASK;
		
		return value&mask;
	}
	
//	private static byte getMonoTypeProperties(byte type, int properties)
//	{
//		assert(!isMultiTyped(type)) : "A singlular type must be passed to get a singular property";
//		
//		switch(type)
//		{
//			case WALL:
//				return (byte)((properties&WALL_PROP_MASK) >> WALL_PROP_SHIFT);
//			case PELLET:
//				return (byte)((properties&PELLET_PROP_MASK) >> PELLET_PROP_SHIFT);
//			case GHOST:
//				return (byte)((properties&GHOST_PROP_MASK) >> GHOST_PROP_SHIFT);
//			default:
//				return 0;
//		}
//	}
	
	public static boolean typeIs(byte typeA, byte typeB)
	{
		return (typeA & typeB)!=0;
	}
	
	
	public static MapNode[][] getNodeMap(int[][] map)
	{
		int height =  map.length;
		int width = map[0].length;
		
		MapNode[][] nodeMap = new MapNode[height][width];
		
		for(int i=0; i<height; i++)
		{
			for(int j=0; j<width; j++)
			{
				nodeMap[height-i-1][j] = new MapNode(j,height-i-1,map[i][j]);
			}
		}
		
		return nodeMap;
	}
	
	public static boolean[][] getContiguousAreaMap(MapNode[][] map, int pointX, int pointY, boolean matchProperties)
	{
		int height =  map.length;
		int width = map[0].length;
		
		// flip y
//		pointY = height-pointY-1;
		byte type = map[pointY][pointX].type;
		boolean[][] contig = new boolean[height][width];
		LinkedList<MapNode> q = new LinkedList<MapNode>();
		q.add(map[pointY][pointX]);
		MapNode n;
		while(!q.isEmpty())
		{
			n = q.pop();
			if(n.type==type)
			{
				contig[n.y][n.x] = true;
				
				int x = Utils.wrapMod(n.x-1, width);
				int y = n.y;
				if(!contig[y][x]) q.addLast(map[y][x]);
				
				x = Utils.wrapMod(n.x+1, width);
				if(!contig[y][x]) q.addLast(map[y][x]);
				
				x = n.x;
				y = Utils.wrapMod(n.y-1, height);
				if(!contig[y][x]) q.addLast(map[y][x]);
				
				y = Utils.wrapMod(n.y+1, height);
				if(!contig[y][x]) q.addLast(map[y][x]);
			}
		}
		return contig;
	}
	
	public static List<MapNode> getContiguousAreaNodes(MapNode[][] map, int pointX, int pointY, boolean matchProperties)
	{
		int height =  map.length;
		int width = map[0].length;

		Set<MapNode> contig = new HashSet<MapNode>();
		byte type = map[pointY][pointX].type;
		LinkedList<MapNode> q = new LinkedList<MapNode>();
		q.add(map[pointY][pointX]);
		MapNode n;
		while(!q.isEmpty())
		{
			n = q.pop();
			if(n.type==type)
			{
				contig.add(n);
				
				int x = Utils.wrapMod(n.x-1, width);
				int y = n.y;
				if(!contig.contains(map[y][x])) q.addLast(map[y][x]);
				
				x = Utils.wrapMod(n.x+1, width);
				if(!contig.contains(map[y][x])) q.addLast(map[y][x]);
				
				x = n.x;
				y = Utils.wrapMod(n.y-1, height);
				if(!contig.contains(map[y][x])) q.addLast(map[y][x]);
				
				y = Utils.wrapMod(n.y+1, height);
				if(!contig.contains(map[y][x])) q.addLast(map[y][x]);
			}
		}
		
		return new ArrayList<MapNode>(contig);
	}
	
//	public static boolean obstructable(byte type)
//	{
//		return typeIs(type,WALL);
//	}
//	
	public static boolean mergeable(byte type)
	{
		return type==WALL || type==WARP;
	}
	
	public static void printMapType(MapNode[][] map)
	{
		int height =  map.length;
		int width = map[0].length;
		for(int i = height-1; i >= 0; i--)
		{
			for(int j = 0; j < width; j++)
			{
				System.out.printf("%8s ", map[i][j]);
			}
	      System.out.println();
	    }
		System.out.println();
	}
	
	public static void printMapAccessible(MapNode[][] map)
	{
		int height =  map.length;
		int width = map[0].length;
		for(int i = height-1; i >= 0; i--)
		{
			for(int j = 0; j < width; j++)
			{
				System.out.printf("%2s ", map[i][j].accessible?1:0);
			}
	      System.out.println();
	    }
		System.out.println();
	}
	
	static class MapNode
	{
		public final int x, y;
		public byte type;
		
		public int properties;
		
		public boolean multiple;
		public boolean accessible;
		
		private MapNode(int x, int y, int value)
		{
			this(x,y,getType(value),getProperties(value));
		}
		private MapNode(int x, int y, byte type)
		{
			this(x,y,type,0);
		}
		private MapNode(int x, int y, byte type, int properties)
		{
			this.x = x;
			this.y = y;
			this.type = type;
			this.properties = properties;
			this.multiple = isMultiTyped(type);
		}
		
		private void addType(byte type)
		{
			this.type |= type;
			this.multiple = isMultiTyped(type);
		}
		
		private void addProperties(int properties)
		{
			this.properties |= properties;
		}
		
		@Override
		public String toString() 
		{
			//TODO multiple to string
			if(multiple) return "Multiple";
			
			switch(type)
			{
				case NONE:
					return "NONE";
				case WALL:
					return "WALL";
				case PLAYER:
					return "PLAYER";
				case PELLET:
					return "PELLET";
				case GHOST:
					return "GHOST";
				case WARP:
					return "WARP";
				default:
					return "?";
			}
		}
	}
	
	static class MergedRectNode extends MapNode
	{
		public final int length;
		public final boolean vertical;
		public MergedRectNode(int x, int y, boolean vertical, int length, byte type, int properties)
		{
			super(x,y,type,properties);
			assert(!multiple) : "Cant do merging of multiple types at the moment";
			this.vertical = vertical;
			this.length = length;
		}
	}
	
	private final MapNode[][] map;
	
	private final int startX, startY;
	protected final int height, width;

//	protected final List<MergedRectNode> walls;
//	protected final List<MergedRectNode> warps;
//	protected final List<MapNode> pellets;
	protected final MapNode player;
	
//	public List<MergedRectNode> getWarps()
//	{
//		return warps;
//	}
//	
//	public List<MergedRectNode> getWalls()
//	{
//		return walls;
//	}
//	
	public MapInfo(int[][] layout)
	{
		this(layout,false);
	}
	
	public MapInfo(int[][] layout, boolean debug)
	{
		
		this.height =  layout.length;
		this.width = layout[0].length;
		
		map = new MapNode[height][width];
		
		MapNode tempPlayer = null;
		
		for(int i=0; i<height; i++)
		{
			for(int j=0; j<width; j++)
			{
				MapNode node = new MapNode(j,height-i-1,layout[i][j]);
				map[height-i-1][j] = node;
				if(node.type==PLAYER)
				{
					assert(tempPlayer==null): "Cannot have two players on a map";
					tempPlayer = node;
				}
			}
		}
		
		assert(tempPlayer!=null||DebugFlags.IGNORE_NO_PLAYER||layout==EMPTY_MAP): "Must have a player in the map";
		
		this.player = tempPlayer;

		this.startX = player==null?10:player.x;
		this.startY = player==null?10:player.y;
				
		if(debug) printMapType(map);
		
		assert(map[startY][startX].type != WALL) : "Starting point for player must not contain a wall";

		setAccessibleArea();
		fixMap();
		
		if(debug) printMapType(map);
		
		// Its inefficient probably to do it like this instead of all at once
//		this.walls = createMergedList(WALL);
//		this.warps = createMergedList(WARP);
//		this.pellets = createList(PELLET);

	}
	
	public void setAccessibleArea()
	{
		LinkedList<MapNode> q = new LinkedList<MapNode>();
		q.add(map[startY][startX]);
		MapNode n;
		while(!q.isEmpty())
		{
			n = q.pop();
			if(!typeIs(n.type,WALL))
			{
				n.accessible = true;
				
				int x = Utils.wrapMod(n.x-1, width);
				int y = n.y;
				if(!map[y][x].accessible) q.addLast(map[y][x]);
				
				x = Utils.wrapMod(n.x+1, width);
				if(!map[y][x].accessible) q.addLast(map[y][x]);
				
				x = n.x;
				y = Utils.wrapMod(n.y-1, height);
				if(!map[y][x].accessible) q.addLast(map[y][x]);
				
				y = Utils.wrapMod(n.y+1, height);
				if(!map[y][x].accessible) q.addLast(map[y][x]);
			}
		}
	}
	
	
	
	
//	public class Warp
//	{
//		public final int aX, aY, bX, bY, length;
//		public final boolean vertical;
//		public Warp(int aX, int aY, int bX, int bY, boolean vertical, int length) 
//		{
//			this.length = length;
//			this.aX = aX;
//			this.aY = height-aY-1;
//			this.bX = bX;
//			this.bY = height-bY-1;
//			this.vertical = vertical;
//		}
//	}
	
//	public class 

	private void fixMap()
	{	
//		boolean[] warpHorizontal = new boolean[height];
		for(int i = 1; i < height-1; i++)
		{
			// if one open-edge is in the play area but the other is not, fill it
			if(playAt(0,i)^playAt(width-1,i))
			{
				map[i][0] = new MapNode(0,i,WALL);
				map[i][width-1]= new MapNode(width-1,i,WALL);

			}
			else if(playAt(0,i) && playAt(width-1,i))
			{
				map[i][0].addType(WARP);; // We only need the one side
//				warpHorizontal[i] = true;
				//warps.add(new Warp(0,i,width-1,i,false));
			}
		}
		
//		boolean[] warpVertical = new boolean[width];
		for(int j = 1; j < width-1; j++)
		{
			// if one open-edge is in the play area but the other is not, fill it
			if(playAt(j,0)^playAt(j,height-1))
			{
				map[0][j] = new MapNode(j,0,WALL);
				map[height-1][j] = new MapNode(j,0,WALL);
			}
			else if(playAt(j,0) && playAt(j,height-1))
			{
				map[0][j].addType(WARP);
				//warps.add(new Warp(j,0,j,height-1,true));
			}
		}
		
		// If corners are part of the play area they should be filled. Corner warps would be too messy.
		if(playAt(0,0)) map[0][0] = new MapNode(0,0,WALL);
		if(playAt(0,height-1)) map[height-1][0] = new MapNode(0,height-1,WALL);
		if(playAt(width-1,height-1)) map[height-1][width-1] = new MapNode(width-1,height-1,WALL);
		if(playAt(width-1,0)) map[0][width-1]= new MapNode(width-1,0,WALL);
		
		
	}
	
	public List<MapNode> createList(byte type)
	{
		List<MapNode> list = new ArrayList<MapNode>();
		for(int i = 0; i<height; i++)
		{
			for(int j = 0; j<width; j++)
			{
				if(typeIs(map[i][j].type,type)) list.add(map[i][j]);
			}
		}
		return list;
	}
	
	/**
	 * Using a two-pass scan-line method of merging into rectangles
	 * @return
	 */
	public List<MergedRectNode> createMergedList(byte type)
	{
		assert(mergeable(type)) : "A merged list can only be made from a mergeable type";
		int sequence = 0;
		boolean[][] singles = emptyBooleans();
		List<MergedRectNode> list = new ArrayList<MergedRectNode>();
		// Horizontal scan
		for(int i = 0; i<height; i++)
		{
			for(int j = 0; j<width; j++)
			{
				boolean match = typeIs(map[i][j].type,type);
				if(match) sequence++;
				
				if(!match || j==width-1)
				{
					int off = (match&&j==width-1)?0:1;
					if(sequence==1) singles[i][j-off] = true;
					else if(sequence>1) list.add(new MergedRectNode(j-sequence+1-off,i, false,sequence,type,0));
					sequence = 0;
				}
			}
		}
		
		// Vertical scan
		for(int j = 0; j<width; j++)
		{
			for(int i = 0; i<height; i++)
			{
				if(singles[i][j]) sequence++;
				
				if(!singles[i][j] || i==height-1)
				{
					int off = (singles[i][j]&&i==height-1)?0:1;
					if(sequence==1) list.add(new MergedRectNode(j,i-off,(j==0),1,type,0));
					else if(sequence>1) list.add(new MergedRectNode(j,i-sequence+(!singles[i][j]?0:1),true,sequence,type,0));
					sequence = 0;
				}
				
				singles[i][j] = false;
			}
		}
		
		return list;
	}
	
	public boolean[][] emptyBooleans()
	{
		return new boolean[height][width];
	}
	
	public boolean wallAt(int x, int y)
	{
		return typeIs(map[y][x].type,WALL);
	}
	
	public boolean playAt(int x, int y)
	{
		return map[y][x].accessible;
	}
	
	public boolean voidAt(int x, int y)
	{
		return map[y][x].type==NONE && !map[y][x].accessible;
	}

	public boolean typeAt(int x, int y, byte type) 
	{
		return typeIs(map[y][x].type,type);
	}
	
}
